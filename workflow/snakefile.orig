IDS, = glob_wildcards("{id}.bam") # Bam files to iterate across

### Requires:
	# GNU wget (and a connection to the outside world)
	# gzip/gunzip
	# AWK 
	# Four bioinformatics packages:
		# the BEDOPS package (https://bedops.readthedocs.io/en/latest/)
		# Sambamba (https://lomereiter.github.io/sambamba/)
		# Picard tools (https://broadinstitute.github.io/picard/) 
		# SAMtools (http://www.htslib.org)

rule all:
# a pseudo-rule to collect the last rule's target files
  input: expand("{id}.ism.pdf", id=IDS)
  output:
  shell:
    'echo "ALL DONE!"'
      
rule get_annotation_file: # wget to retrieve a hg19 genome annotation file (~450MB) from the Cambridge EBI in the UK
  input:
  output:
      "gff.gz"
  shell:
    'wget -qO- ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_35/GRCh37_mapping/gencode.v35lift37.basic.annotation.gff3.gz > {output}'
    
rule gunzipper: # gunzip the file
  input:
    "gff.gz"
  output:
    "gff.txt"
  shell:
    'gunzip -c {input} > {output}'
    
rule awker: # use AWK to retain only rows defining exons and only rows within the TP53 gene
  input:
    "gff.txt"
  output:
    "e.txt"
  shell:
    'awk \'$3 == "exon" && $9 ~ "gene_name=TP53;"\' {input} > {output}'

rule convert2bed: # convert to a bed file using the convert2bed function of the BEDOPS package
  input:
    "e.txt"
  output:
    "exons.bed"
  shell:
    'convert2bed -i gff < {input} > {output}'

rule bedscript_R: 
# An R script that trims and reformats the exons.bed file generated above into a simple 4-column bed file defining all exons in TP53
# This is clunky and it could all be done in a single line of AWK but I want to include a test of R in the Rakeiora sandbox please
# the internal comments explain what the R script does, it does not depend on any packages apart from the base R package
  input:
    txt= "exons.bed"
  output:
    out= "exons.simple.bed"
  script:
    'snakemake_bedscript.R'

rule exon_base_coverage:
  input:
    I1="{id}.bam",
    I2="exons.simple.bed"
  output:
    "{id}.TP53_exon_coverage.txt"
  run:
# Use SAMtools depth to calculate coverage at every base in every exon of TP53  
    shell('samtools depth -Hb {input.I2} {input.I1} -o {output}')
    
rule metrics:
  input:
    I1="{id}.bam"
  output:
    O1="{id}.bam_statistics.txt",
    O3="{id}.ism.txt",
    O4="{id}.ism.pdf"       
  run:
# use the sambamba version of the SAMtools flagstat function to generate, for each Bam file in the directory, a file summarising a set of useful QC metrics  
    shell('sambamba flagstat {input.I1} > {output.O1}')
    shell('echo " " >> {output.O1}')
    shell('echo "READS WITH mapping_quality >= 30" >> {output.O1}')
    shell('sambamba view -c -F "mapping_quality >= 30" {input.I1} >> {output.O1}')
    shell('echo " " >> {output.O1}')
# use picard toolâ€™s CollectInsertSizeMetrics function to generate, for each Bam file in the directory, a txt file and a histogram showing the distribution of DNA sequence insert size    
    shell('echo "Insert sizes" >> {output.O1}')
    shell('picard CollectInsertSizeMetrics I={input.I1} O={output.O3} H={output.O4}')
    shell('cat {output.O3} >> {output.O1}') # append insert size metrics to the msin metrics output file for each sample
    
